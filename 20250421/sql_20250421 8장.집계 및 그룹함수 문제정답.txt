
-- 이상 >=, 초과 >, 이하 <=, 미만 <
-- 1. employees 테이블에서 salary가 8000이상인 직원의 수를 조회
SELECT COUNT(salary)
FROM employees
WHERE salary >= 8000;

-- 2. employees 테이블에서 hire_date가 2007년1월1일 이후인 직원의 수를 조회
select COUNT(salary)
from EMPLOYEES
where hire_date >= '20070101';

-- 3. jobs 테이블에서 max_salary 값의 합계와 평균을 조회
select *
from jobs;

select sum(max_salary) 합계, round(avg(max_salary), 2) 평균
from jobs;

-- 4. employees 테이블에서 job_id가 ‘IT_PROG’인 직원의 salary 합계와 평균을 조회
select * 
from employees;

select sum(salary), avg(salary)
from employees
where job_id='IT_PROG';


-- 5.  employees 테이블에서 department_id가 50과 80 사이인 직원의
--      first_name, salary, 그리고 commission_pct의 평균값을
--      first_name 정렬 기준으로 조회 (null값은 0으로 출력)
select * 
from employees;

select first_name, salary
from employees
where department_id BETWEEN 50 AND 80;

select first_name, salary, NVL(commission_pct, 0)
from employees
where department_id BETWEEN 50 AND 80
order by first_name;

select first_name, salary, avg(NVL(commission_pct, 0))
from employees
where department_id BETWEEN 50 AND 80
group by first_name, salary, commission_pct
order by first_name;

-- 6. jobs 테이블에서 max_salary 값의 최솟값과 max_salary 값의 최댓값을 조회
select min(max_salary), max(max_salary)
from jobs;

-- 7. jobs 테이블에서 job_title이 ‘Programmer’인 직업의 
--      max_salary값의 최솟값과 max_salary 값의 최댓값을 조회
select *
from jobs
where job_title='Programmer';

select min(max_salary), max(max_salary)
from jobs
where job_title='Programmer';

-- 8.  employees 테이블에서 department_id가 50인 데이터의 hire_date 최소값과 최댓값 조회
select *
from employees
where department_id=50;

select min(hire_date), max(hire_date)
from employees
where department_id=50;

-- 9. employees 테이블에서 department_id가 100인 데이터의 first_name, salary, 
--      그리고 salary의 분산값을 hire_date 정렬 기준으로 조회
select *
from employees
where department_id = 100;

select first_name, salary
from employees
where department_id = 100;

select first_name, salary, variance(salary)
from employees
where department_id = 100
group by first_name, salary, hire_date
ORDER BY hire_date;

select hire_date, first_name, salary, variance(salary) OVER ()
from employees
where department_id = 100
ORDER BY hire_date;

-- 10. employees 테이블에서 hire_date 값이 2004년1월1일부터 2006년12월31일 사이의 데이터를
--      job_id 기준으로 그룹화한 뒤에 job_id와 salary 최솟값과 최대값을 조회
select *
from employees
where hire_date between '20040101' and '20061231';

select job_id, min(salary), max(salary)
from employees
where hire_date between '20040101' and '20061231'
group by job_id;

-- 11.  employees 테이블에서 department_id가 50과 80인 데이터를 
--      department_id와 job_id 기준으로 그룹화한 뒤에 department_id와 job_id, 
--      salary합계, 최솟값, 최대값을 job_id 기준으로 정렬하여 조회
select *
from employees
where department_id between 50 and 80;

select department_id, job_id
from employees
where department_id between 50 and 80
group by department_id, job_id;

select department_id, job_id, sum(salary), min(salary), max(salary)
from employees
where department_id between 50 and 80
group by department_id, job_id
order by job_id;

-- 12.  employees 테이블에서 department_id와 job_id 기준으로 그룹화한 뒤에
--      salary 평균값이 12000 이상인 데이터만 department_id와 job_id, salary
--      최솟값, 최대값, 평균을 department_id 기준으로 정렬하여 조회

--employees 테이블에서 department_id와 job_id 기준으로 그룹화
select *
from employees
group by department_id, job_id;

-- employees 테이블에서 department_id와 job_id 기준으로 그룹화
-- + department_id와 job_id, salary 최솟값, 최대값, 평균
select department_id, job_id, min(salary), max(salary), avg(salary)
from employees
group by department_id, job_id;

-- employees 테이블에서 department_id와 job_id 기준으로 그룹화
-- + department_id와 job_id, salary 최솟값, 최대값, 평균
-- + salary 평균값이 12000 이상인 데이터
select department_id, job_id, min(salary), max(salary), avg(salary)
from employees
group by department_id, job_id
having avg(salary)>=12000;

-- employees 테이블에서 department_id와 job_id 기준으로 그룹화
-- + department_id와 job_id, salary 최솟값, 최대값, 평균
-- + salary 평균값이 12000 이상인 데이터
-- + department_id 기준으로 정렬
select department_id, job_id, min(salary), max(salary), avg(salary)
from employees
group by department_id, job_id
having avg(salary)>=12000
order by department_id;
